#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'chat_types'

module ChatAPI
  class Client
    include ::Thrift::Client

    def addNewUser(username)
      send_addNewUser(username)
      return recv_addNewUser()
    end

    def send_addNewUser(username)
      send_message('addNewUser', AddNewUser_args, :username => username)
    end

    def recv_addNewUser()
      result = receive_message(AddNewUser_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addNewUser failed: unknown result')
    end

    def sendMessage(message, username, token)
      send_sendMessage(message, username, token)
      return recv_sendMessage()
    end

    def send_sendMessage(message, username, token)
      send_message('sendMessage', SendMessage_args, :message => message, :username => username, :token => token)
    end

    def recv_sendMessage()
      result = receive_message(SendMessage_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessage failed: unknown result')
    end

    def getConversation(username, token)
      send_getConversation(username, token)
      return recv_getConversation()
    end

    def send_getConversation(username, token)
      send_message('getConversation', GetConversation_args, :username => username, :token => token)
    end

    def recv_getConversation()
      result = receive_message(GetConversation_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getConversation failed: unknown result')
    end

    def registerAndroidToken(pushToken, token)
      send_registerAndroidToken(pushToken, token)
      recv_registerAndroidToken()
    end

    def send_registerAndroidToken(pushToken, token)
      send_message('registerAndroidToken', RegisterAndroidToken_args, :pushToken => pushToken, :token => token)
    end

    def recv_registerAndroidToken()
      result = receive_message(RegisterAndroidToken_result)
      return
    end

    def registeriOSToken(pushToken, token)
      send_registeriOSToken(pushToken, token)
      recv_registeriOSToken()
    end

    def send_registeriOSToken(pushToken, token)
      send_message('registeriOSToken', RegisteriOSToken_args, :pushToken => pushToken, :token => token)
    end

    def recv_registeriOSToken()
      result = receive_message(RegisteriOSToken_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_addNewUser(seqid, iprot, oprot)
      args = read_args(iprot, AddNewUser_args)
      result = AddNewUser_result.new()
      result.success = @handler.addNewUser(args.username)
      write_result(result, oprot, 'addNewUser', seqid)
    end

    def process_sendMessage(seqid, iprot, oprot)
      args = read_args(iprot, SendMessage_args)
      result = SendMessage_result.new()
      result.success = @handler.sendMessage(args.message, args.username, args.token)
      write_result(result, oprot, 'sendMessage', seqid)
    end

    def process_getConversation(seqid, iprot, oprot)
      args = read_args(iprot, GetConversation_args)
      result = GetConversation_result.new()
      result.success = @handler.getConversation(args.username, args.token)
      write_result(result, oprot, 'getConversation', seqid)
    end

    def process_registerAndroidToken(seqid, iprot, oprot)
      args = read_args(iprot, RegisterAndroidToken_args)
      result = RegisterAndroidToken_result.new()
      @handler.registerAndroidToken(args.pushToken, args.token)
      write_result(result, oprot, 'registerAndroidToken', seqid)
    end

    def process_registeriOSToken(seqid, iprot, oprot)
      args = read_args(iprot, RegisteriOSToken_args)
      result = RegisteriOSToken_result.new()
      @handler.registeriOSToken(args.pushToken, args.token)
      write_result(result, oprot, 'registeriOSToken', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class AddNewUser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddNewUser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MESSAGE = 1
    USERNAME = 2
    TOKEN = 3

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConversation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    TOKEN = 2

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConversation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ChatMessage}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterAndroidToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PUSHTOKEN = 1
    TOKEN = 2

    FIELDS = {
      PUSHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'pushToken'},
      TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterAndroidToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisteriOSToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PUSHTOKEN = 1
    TOKEN = 2

    FIELDS = {
      PUSHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'pushToken'},
      TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisteriOSToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

